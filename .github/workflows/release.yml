name: Cross Platform Release Build

on:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          #- os: ubuntu-latest
          #  platform: linux
          #  arch: x86_64
          #  ext: ""
          - os: windows-latest
            platform: windows
            arch: x86_64
            ext: ".exe"
            vcpkg_triplet: x64-windows-release
          #- os: macos-latest
          #  platform: macos
          #  arch: arm64
          #  ext: ""

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.platform }}-${{ matrix.arch }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: lukka/get-cmake@latest

      # Setup vcpkg: ensures vcpkg is downloaded and built.
      # Since vcpkg.json is being used later on to install the packages
      # when `run-cmake` runs, no packages are installed at this time
      # (and vcpkg does not run).
    - name: Setup anew (or from cache) vcpkg (and does not build any package)
      uses: lukka/run-vcpkg@v11 # Always specify the specific _version_ of the
                                # action you need, `v11` in this case to stay up
                                # to date with fixes on the v11 branch.
      #with:
        # This is the default location of the directory containing vcpkg sources.
        # Change it to the right location if needed.
        # vcpkgDirectory: '${{ github.workspace }}/vcpkg'

        # If not using a Git submodule for vcpkg sources, this input
        # specifies which commit id to checkout from a Git repo.
        # Notes: 
        # - it must _not_ be set if using a Git submodule for vcpkg.
        # - if not provided, the `vcpkgConfigurationJsonGlob` or `vcpkgJsonGlob`
        #   are being used to locate either a vcpkg-configuration.json or vcpkg.json
        #   in order to use the builtin-baseline or the default-registry's
        #   builtin baseline.
        # vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

        # This is only needed if the command `vcpkg install` must run at this step.
        # Instead it is highly suggested to let `run-cmake` to run vcpkg later on
        # using the vcpkg.cmake toolchain. The default is `false`.
        # runVcpkgInstall: true

        # This is only needed if `runVpkgInstall` is `true`.
        # This glob expression used to locate the vcpkg.json and  use
        # its directory location as `working directory` when running `vcpkg install`.
        # Change it to match a single manifest file you want to use.
        # Note: do not use `${{ github.context }}` to compose the value as it
        # contains backslashes that would be misinterpreted. Instead
        # compose a value relative to the root of the repository using
        # `**/path/from/root/of/repo/to/vcpkg.json` to match the desired `vcpkg.json`.
        # vcpkgJsonGlob: '**/vcpkg.json'

    - name: Environment Variables
      run: |
        VCPKG_ROOT="${{ github.workspace }}/vcpkg"

        echo "
        VCPKG_ROOT=$VCPKG_ROOT
        " >> $GITHUB_ENV
      shell: bash

    - name: Test Environment Variables
      run: |
        echo $VCPKG_ROOT
        echo $PATH
        which vcpkg
        vcpkg --version

        which cmake
        cmake --version

        which ninja
        ninja --version

        python3 scripts/test.py
      shell: bash

    - name: Build
      run: python3 scripts build
      shell: bash

    #- name: Package
    #  run: |
    #    mkdir -p package
    #    cp build/telebot${{ matrix.ext }} package/
    #    
    #    if [ "${{ matrix.platform }}" = "windows" ]; then
    #      powershell -Command "Compress-Archive -Path package\\* -DestinationPath ${{ matrix.platform }}-${{ matrix.arch }}.zip"
    #    else
    #      zip -r ${{ matrix.platform }}-${{ matrix.arch }}.zip package
    #    fi
    #  shell: bash

    #- name: Upload
    #  uses: softprops/action-gh-release@v1
    #  with:
    #    files: ${{ matrix.platform }}-${{ matrix.arch }}.zip
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
